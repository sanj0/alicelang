### a better brainfuck intepreter using a linked list!
if (argc 1 neq) {
    "wrong amount of arguments!" throw
} fi

"list.alice" include

const arg0 readf:CODE
# lazily grow the "tape"
const new:CELLS
0 CELLS add
var 0:ptr

var 0:i
while (i CODE length lt) {
    const CODE i charat:C
    if (C ">" eq) {
        # ----- move pointer to the "right"
        ptr ++:ptr
        if (ptr CELLS.size eq) {
            0 CELLS.add
        } fi
    } (C "<" eq) {
        # ----- move pointer to the "left"
        ptr --:ptr
        if (ptr 0 lt) {
            "cannot move pointer past 0!" throw
        } fi
    } (C "+" eq) {
        # ----- increment cell at pointer
        ptr CELLS.geti
        ++ ptr CELLS.seti
    } (C "-" eq) {
        # ----- decrement cell at pointer
        ptr CELLS.geti
        -- ptr CELLS.seti
    } (C "[" eq) {
        # ----- advance to matching ] if cell is zero
        ptr CELLS.geti
        if (0 eq) {
            var 1:level
            while (level 0 gt) {
                i ++:i
                const CODE i charat :C
                if (C "]" eq) {
                    level --:level
                } (C "[" eq) {
                    level ++:level
                } fi
            } do
        } fi
    } (C "]" eq) {
        # ----- backtrack to matching "[" if cell is nonzero
        ptr CELLS.geti
        if (0 neq) {
            var 1:level
            while (level 0 gt) {
                i --:i
                const CODE i charat :C
                if (C "[" eq) {
                    level --:level
                } (C "]" eq) {
                    level ++:level
                } fi
            } do
        } fi
    } (C "." eq) {
        # ----- write cell as unicode
        ptr CELLS.geti
        character P
    } (C "," eq) {
        # ----- read single character into cell
        r
        if (length d= not) {
            "must only input one character!" throw
        } fi
        unicode ptr CELLS.seti
    } fi
    i ++:i
} do

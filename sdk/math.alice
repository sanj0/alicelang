### subprograms and constants for mathematical needs ###
"alice.lang.math" ninclude

# --- math constants --- #
export const 2.7182818284590452354   :E
export const 3.14159265358979323846  :PI
export const 0.017453292519943295    :DEG_TO_RAD
export const 57.29577951308232       :RAD_TO_DEG
export var   1                       :round-p5-up

# --- math subprograms --- #

# converts the top of the stack to an absolute value
export fun {
    d NUMBER type-check
    d
    if (0 lt) {
        -1 *
    } fi
}:abs

# floors the head of the stack
export fun {
    d 1 % -
}:floor

# ceils the head of the stack
export fun {
    d 
    if (1 %) { 
        d 1 swap 1 % - +
    } else {
        return
    } fi
}:ceil

# logarithm
# 7 3 log = log_3(7)
export fun {
    swap ln swap ln /
}:log

# squares the head of the stack
export fun {
    2 **
}:square

# cube the head of the stack
export fun {
    3 swap **
}:cube

export fun {
    0.5 **
}:sqrt

# of two elements popped, push the smaller one
export fun {
    if (d2 lt) {
        drop
    } else {
        swap drop
    } fi
}:min

# of two elements popped, push the greater one
export fun {
    if (d2 gt) {
        drop
    } else {
        swap drop
    } fi
}:max

# convert the head of the stack from degrees to radians
export fun {
    DEG_TO_RAD *
}:to-radians

# convert the head of the stack from radians to degrees
export fun {
    RAD_TO_DEG *
}:to-degrees

# 0.46 0.1 round -> [0.5]
export fun {
    d rot swap / round-to-int *
}:round

# rounds the top of the stack to an integer.
# whether or not .5 is rounded up is defined by :round-p5-up
export fun {
    d 1 %
    d 0.5 lt not
    round-p5-up 
    if (and) {
        1 swap - +
    } else {
        -
    } fi
}:round-to-int

export fun {
    2 % not # leaves 1 or 0 on the stack anyway, just have to flip it
}:?even

export fun {
    2 %     # leaves 1 or 0 on the stack anyway
}:?odd

# faster prime check that fails for 1
# credits: xCryptic11
export nfun "alice.lang.math":?prime-not-1

export fun {
    if (1 d=) {
        0 return
    } fi
    ?prime-not-1
}:?prime

